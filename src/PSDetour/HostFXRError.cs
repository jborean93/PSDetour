namespace PSDetour;

// https://github.com/dotnet/runtime/blob/main/docs/design/features/host-error-codes.md
public enum HostFXRError
{
    Success = 0,
    Success_HostAlreadyInitialized = 1,
    Success_DifferentRuntimeProperties = 2,
    InvalidArgFailure = -2147450751,
    CoreHostLibLoadFailure = -2147450750,
    CoreHostLibMissingFailure = -2147450749,
    CoreHostEntryPointFailure = -2147450748,
    CoreHostCurHostFindFailure = -2147450747,
    CoreClrResolveFailure = -2147450745,
    CoreClrBindFailure = -2147450744,
    CoreClrInitFailure = -2147450743,
    CoreClrExeFailure = -2147450742,
    ResolverInitFailure = -2147450741,
    ResolverResolveFailure = -2147450740,
    LibHostCurExeFindFailure = -2147450739,
    LibHostInitFailure = -2147450738,
    LibHostSdkFindFailure = -2147450735,
    LibHostInvalidArgs = -2147450734,
    InvalidConfigFile = -2147450733,
    AppArgNotRunnable = -2147450732,
    AppHostExeNotBoundFailure = -2147450731,
    FrameworkMissingFailure = -2147450730,
    HostApiFailed = -2147450729,
    HostApiBufferTooSmall = -2147450728,
    LibHostUnknownCommand = -2147450727,
    LibHostAppRootFindFailure = -2147450726,
    SdkResolverResolveFailure = -2147450725,
    FrameworkCompatFailure = -2147450724,
    FrameworkCompatRetry = -2147450723,
    AppHostExeNotBundle = -2147450722,
    BundleExtractionFailure = -2147450721,
    BundleExtractionIOError = -2147450720,
    LibHostDuplicateProperty = -2147450719,
    HostApiUnsupportedVersion = -2147450718,
    HostInvalidState = -2147450717,
    HostPropertyNotFound = -2147450716,
    CoreHostIncompatibleConfig = -2147450715,
    HostApiUnsupportedScenario = -2147450714,
    HostFeatureDisabled = -2147450713,
}

public static class HostFXRErrorHelper
{
    public static string GetErrorMessage(HostFXRError error) => error switch
    {
        HostFXRError.Success => "Operation was successful",
        HostFXRError.Success_HostAlreadyInitialized => "Initialization was successful, but another host context is already initialized.",
        HostFXRError.Success_DifferentRuntimeProperties => "Initialization was successful, but another host context is already initialized and the requested context specified some runtime properties which are not the same to the already initialized context",
        HostFXRError.InvalidArgFailure => "One of the specified arguments for the operation is invalid",
        HostFXRError.CoreHostLibLoadFailure => "There was a failure loading a dependent library",
        HostFXRError.CoreHostLibMissingFailure => "One of the dependent libraries is missing",
        HostFXRError.CoreHostEntryPointFailure => "One of the dependent libraries is missing a required entry point.",
        HostFXRError.CoreHostCurHostFindFailure => "Either the location of the current module could not be determined or the location is not in the right place relative to other expected components",
        HostFXRError.CoreClrResolveFailure => "Failed to resolve the coreclr library",
        HostFXRError.CoreClrBindFailure => "The loaded coreclr library does not have one of the required entry points",
        HostFXRError.CoreClrInitFailure => "The call to coreclr_initialize failed",
        HostFXRError.CoreClrExeFailure => "The call to coreclr_execute_assembly failed",
        HostFXRError.ResolverInitFailure => "Initialization of the hostpolicy dependency resolver failed",
        HostFXRError.ResolverResolveFailure => "Resolution of dependencies in hostpolicy failed",
        HostFXRError.LibHostCurExeFindFailure => "Failure to determine the location of the current executable",
        HostFXRError.LibHostInitFailure => "Initialization of the hostpolicy library failed",
        HostFXRError.LibHostSdkFindFailure => "Failure to find the requested SDK",
        HostFXRError.LibHostInvalidArgs => "Arguments to hostpolicy are invalid",
        HostFXRError.InvalidConfigFile => "The .runtimeconfig.json file is invalid",
        HostFXRError.AppArgNotRunnable => "Used internally when the command line for dotnet.exe does not contain path to the application to run",
        HostFXRError.AppHostExeNotBoundFailure => "apphost failed to determine which application to run",
        HostFXRError.FrameworkMissingFailure => "It was not possible to find a compatible framework version",
        HostFXRError.HostApiFailed => "hostpolicy could not calculate NATIVE_DLL_SEARCH_DIRECTORIES",
        HostFXRError.HostApiBufferTooSmall => "Buffer specified to an API is not big enough to fit the requested value",
        HostFXRError.LibHostUnknownCommand => "Returned by hostpolicy if corehost_main_with_output_buffer is called with unspported host commands",
        HostFXRError.LibHostAppRootFindFailure => "Returned by apphost if the imprinted application path does not exist",
        HostFXRError.SdkResolverResolveFailure => "Returned from hostfxr_resolve_sdk2 when it failed to find matching SDK",
        HostFXRError.FrameworkCompatFailure => "During processing of .runtimeconfig.json there were two framework references to the same framework which were not compatible",
        HostFXRError.FrameworkCompatRetry => "Error used internally if the processing of framework references from .runtimeconfig.json reached a point where it needs to reprocess another already processed framework reference",
        HostFXRError.AppHostExeNotBundle => "Error reading the bundle footer metadata from a single-file apphost",
        HostFXRError.BundleExtractionFailure => "Error extracting single-file apphost bundle",
        HostFXRError.BundleExtractionIOError => "Error reading or writing files during single-file apphost bundle extraction",
        HostFXRError.LibHostDuplicateProperty => "The .runtimeconfig.json specified by the app contains a runtime property which is also produced by the hosting layer",
        HostFXRError.HostApiUnsupportedVersion => "Feature which requires certain version of the hosting layer binaries was used on a version which does not support it",
        HostFXRError.HostInvalidState => "Error code returned by the hosting APIs in hostfxr if the current state is incompatible which the requested operation",
        HostFXRError.HostPropertyNotFound => "Property requested by hostfxr_get_runtime_property_value does not exist",
        HostFXRError.CoreHostIncompatibleConfig => "Error returned by hostfxr_initialize_for_runtime_config if the component being initialized requires framework which is not available or incompatible with the frameworks loaded by the runtime already in the process",
        HostFXRError.HostApiUnsupportedScenario => "Error returned by hostfxr_get_runtime_delegate when hostfxr does not currently support requesting the given delegate type using the given context",
        HostFXRError.HostFeatureDisabled => "Error returned by hostfxr_get_runtime_delegate when managed feature support for native host is disabled",
        _ => "Unkown error",
    };
}
