name: Test PSDetour
on:
  push:
    branches:
    - main

  pull_request:
    branches:
    - main

  release:
    types:
    - published

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  BUILD_CONFIGURATION: ${{ fromJSON('["Debug", "Release"]')[startsWith(github.ref, 'refs/tags/v')] }}

jobs:
  build:
    name: build
    runs-on: windows-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.100-rc.2.22477.23'

    - name: Build module - Debug
      shell: pwsh
      run: ./build.ps1 -Configuration $env:BUILD_CONFIGURATION -Task Build
      if: ${{ env.BUILD_CONFIGURATION == 'Debug' }}

    - name: Build module - Publish
      shell: pwsh
      run: ./build.ps1 -Configuration $env:BUILD_CONFIGURATION -Task Build
      if: ${{ env.BUILD_CONFIGURATION == 'Release' }}
      env:
        PSMODULE_SIGNING_CERT: ${{ secrets.PSMODULE_SIGNING_CERT }}
        PSMODULE_SIGNING_CERT_PASSWORD: ${{ secrets.PSMODULE_SIGNING_CERT_PASSWORD }}

    - name: Capture PowerShell Module
      uses: actions/upload-artifact@v2
      with:
        name: PSModule
        path: output/*.nupkg

  test:
    name: test
    needs:
    - build
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        info:
        - name: PS 7.2 x64
          psversion: '7.2.7'
        - name: PS 7.3 x64
          psversion: 7.3.0-preview.8

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.100-rc.2.22477.23'

    - name: Restore Built PowerShell Module
      uses: actions/download-artifact@v2
      with:
        name: PSModule
        path: output

    - name: Install PowerShell
      shell: pwsh
      run: |
        tools/AssertPwsh.ps1 -RequiredVersion '${{ matrix.info.psversion }}'

    - name: Install Built PowerShell Module
      shell: pwsh
      run: |
        $manifestItem = Get-Item ([IO.Path]::Combine('module', '*.psd1'))
        $moduleName = $manifestItem.BaseName
        $manifest = Test-ModuleManifest -Path $manifestItem.FullName -ErrorAction SilentlyContinue -WarningAction Ignore

        $destPath = [IO.Path]::Combine('output', $moduleName, $manifest.Version)
        if (-not (Test-Path -LiteralPath $destPath)) {
            New-Item -Path $destPath -ItemType Directory | Out-Null
        }

        # WinPS doesn't support extracting from anything without a .zip extension so we need to rename it
        Get-ChildItem output/*.nupkg | Rename-Item -NewName { $_.Name -replace '.nupkg', '.zip' }

        Expand-Archive -Path output/*.zip -DestinationPath $destPath -Force -ErrorAction Stop

    - name: Run Tests
      shell: pwsh
      run: |
        & "output/pwsh-${{ matrix.info.psversion }}/pwsh.exe" -NoProfile -File ./build.ps1 -Configuration $env:BUILD_CONFIGURATION -Task Test
        exit $LASTEXITCODE

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Unit Test Results (${{ matrix.info.name }})
        path: ./output/TestResults/Pester.xml

    - name: Upload Coverage Results
      if: always() && !startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v2
      with:
        name: Coverage Results (${{ matrix.info.name }})
        path: ./output/TestResults/Coverage.xml

    - name: Upload Coverage to codecov
      if: always() && !startsWith(github.ref, 'refs/tags/v')
      uses: codecov/codecov-action@v1
      with:
        files: ./output/TestResults/Coverage.xml
        flags: ${{ matrix.info.name }}

  publish:
    name: publish
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
    - build
    - test
    runs-on: windows-latest
    steps:
    - name: Restore Built PowerShell Module
      uses: actions/download-artifact@v2
      with:
        name: PSModule
        path: ./

    - name: Publish to Gallery
      if: github.event_name == 'release'
      shell: pwsh
      run: >-
        dotnet nuget push '*.nupkg'
        --api-key $env:PSGALLERY_TOKEN
        --source 'https://www.powershellgallery.com/api/v2/package'
        --no-symbols
      env:
        PSGALLERY_TOKEN: ${{ secrets.PSGALLERY_TOKEN }}
